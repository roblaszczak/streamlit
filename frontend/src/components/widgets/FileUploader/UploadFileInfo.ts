import { CancelTokenSource } from "axios"

export interface UploadingStatus {
  type: "uploading"
  cancelToken: CancelTokenSource
  progress: number
}

export interface UploadedStatus {
  type: "uploaded"

  /** ID generated by the server. */
  serverFileId: number
}

export interface ErrorStatus {
  type: "error"
  errorMessage: string
}

/** The various statuses that an UploadedFileInfo can have. */
export type FileStatus = UploadingStatus | UploadedStatus | ErrorStatus

/**
 * Wraps a File object with additional data used by FileUploader.
 * This class is immutable because it's used in within FileUploader.state.
 */
export class UploadFileInfo {
  public readonly name: string

  public readonly size: number

  public readonly status: FileStatus

  /**
   * ID used to refer to the file locally, for update operations.
   * If the file is uploaded, it will also have a serverID, which is
   * used to refer to the file on the server.
   */
  public readonly id: number

  /**
   * Create a clone of this UploadFileInfo with the given status.
   */
  public setStatus(status: FileStatus): UploadFileInfo {
    return new UploadFileInfo(this.name, this.size, this.id, status)
  }

  public constructor(
    name: string,
    size: number,
    id: number,
    status: FileStatus
  ) {
    this.name = name
    this.size = size
    this.id = id
    this.status = status
  }
}
